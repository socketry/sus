#!/usr/bin/env ruby

require 'json'

require_relative '../lib/sus/config'
config = Sus::Config.load

require_relative '../lib/sus'
require_relative '../lib/sus/output/structured'

verbose = false
$stdout.sync = true

input = $stdin.dup
$stdin.reopen(File::NULL)
output = $stdout.dup
$stdout.reopen($stderr)

while line = input.gets
	message = JSON.parse(line)
	
	if test = message['run']
		top = Sus::Assertions.new(measure: true)
		config.before_tests(top)
		
		loader = Thread.new do
			registry = config.load_registry(tests)
			
			registry.each do |child|
				jobs << child
			end
			
			jobs.close
		end
		
		while job = jobs.pop
			top.nested do |assertions|
				job.call(assertions)
			end
		end
		
		loader.join
		workers.each(&:join)
		results.close
		
		aggregate.join
		config.after_tests(top)
		
		workers.each(&:join)
		
		if config.respond_to?(:covered)
			if covered = config.covered and covered.record?
				covered.policy.each do |coverage|
					output.puts JSON.generate({coverage: coverage.path, counts: coverage.counts})
				end
			end
		end
		
		output.puts JSON.generate({finished: true, message: top.output.string, duration: top.clock.ms})
	else
		$stderr.puts "Unknown message: #{message}"
	end
end
